
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://rsphmqacmkolwsuhqewt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJzcGhtcWFjbWtvbHdzdWhxZXd0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcxNTk4MTgsImV4cCI6MjA2MjczNTgxOH0.L16XDKBgsVR2Y_KSC6bstjpthXo2llLb4-7fUHGUdxA";

// Configure Supabase with performance optimizations
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      storageKey: 'microguide-auth',
      autoRefreshToken: true,
      detectSessionInUrl: true
    },
    global: {
      headers: {
        'x-application-name': 'microguide',
      },
    },
    realtime: {
      timeout: 30000, // 30 seconds
    },
    db: {
      schema: 'public',
    },
  }
);

// Create a simple cache for frequently accessed data
const cache: Record<string, { data: any, expiry: number }> = {};

// Enhanced supabase queries with caching
export const enhancedQuery = async (
  key: string,
  queryFn: () => Promise<any>, 
  ttl = 60000 // 1 minute default cache
) => {
  const now = Date.now();
  
  // Return from cache if available and not expired
  if (cache[key] && cache[key].expiry > now) {
    console.log(`[Cache] Using cached data for ${key}`);
    return cache[key].data;
  }
  
  // Execute the query
  console.log(`[Cache] Fetching fresh data for ${key}`);
  const start = performance.now();
  const result = await queryFn();
  const end = performance.now();
  
  console.log(`[Performance] Query ${key}: ${(end - start).toFixed(2)}ms`);
  
  // Cache the result
  cache[key] = {
    data: result,
    expiry: now + ttl
  };
  
  return result;
};

// Clear cache for specific keys or patterns
export const clearCache = (keyPattern?: string) => {
  if (!keyPattern) {
    console.log('[Cache] Clearing entire cache');
    Object.keys(cache).forEach(key => delete cache[key]);
    return;
  }
  
  const regex = new RegExp(keyPattern);
  Object.keys(cache)
    .filter(key => regex.test(key))
    .forEach(key => {
      console.log(`[Cache] Clearing cache for ${key}`);
      delete cache[key];
    });
};
